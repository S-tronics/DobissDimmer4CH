/**********************************************************************************************************************/
/**
 * @file        adc\DrvAdc.h
 *
 * @author      Stijn Vermeersch
 * @date        22.12.2010
 *
 * @brief       Basic ADC manipulation functionality
 *
 * This ADC manipulating module is designed to be used for initialisation and modifying ADC ports and pins.\n
 * The implementation is <em>NOT</em> designed to be FAST!\n
 *
 *
 * \n<hr>\n
 * Copyright (c) 2010, TVH\n
 * All rights reserved.
 * \n<hr>\n
 */
/**********************************************************************************************************************/
#ifndef DRV__ADC_H
#define DRV__ADC_H
/**********************************************************************************************************************/



/***********************************************************************************************************************
; I N C L U D E S
;---------------------------------------------------------------------------------------------------------------------*/

//DRIVER lib include section

/**********************************************************************************************************************/



/***********************************************************************************************************************
; E X P O R T E D   S Y M B O L   D E F I N I T I O N S   A N D   M A C R O S
;---------------------------------------------------------------------------------------------------------------------*/
/**********************************************************************************************************************/



/***********************************************************************************************************************
; E X P O R T E D   T Y P E D E F S
;---------------------------------------------------------------------------------------------------------------------*/
/**
 * @brief   Adc pin name
 */
typedef enum
{
    ADC_AN0 = 0x00,
	ADC_AN1 = 0x01,
	ADC_AN2 = 0x02,
	ADC_AN3 = 0x03,
	ADC_AN4 = 0x04,
	ADC_AN8 = 0x08,
	ADC_AN9 = 0x09,
	ADC_AN10 = 0x0A,
	ADC_AN11 = 0x0B,
	ADC_AN12 = 0x0C,
	ADC_AN13 = 0x0D,
	ADC_AN14 = 0x0E,
	ADC_AN15 = 0x0F,
	ADC_AN16 = 0x10,
	ADC_AN17 = 0x11,
	ADC_AN18 = 0x12,
	ADC_AN19 = 0x13
}
ADC_PIN_NAME;

typedef struct
{
	ADC_PIN_NAME 	adc_pin;
	BOOLEAN			conv_done;
	UNSIGNED_16		value;	
}
ADC_CHANNEL;

/**
 * @brief   Prototype of a ADC Conversion done routine
 */
//typedef void (*HOOK_ADC_CONVERSION_DONE)(void);
/**********************************************************************************************************************/



/***********************************************************************************************************************
; E X P O R T E D   V A R I A B L E S
;---------------------------------------------------------------------------------------------------------------------*/

/**********************************************************************************************************************/



/***********************************************************************************************************************
; E X P O R T E D   F U N C T I O N   P R O T O T Y P E S
;---------------------------------------------------------------------------------------------------------------------*/
/**
 * @brief   Initialiser for the ADC module
 *
 * Registers the ADC module.\n
 * This method must be called only once, which is normally done in the startup phase of the processor.\n
 */
void DrvAdcInit(void);

/**
 * @brief   Function to initialise an ADC channel.
 *
 * Sets processorpin into the correct configuration.\n
 *
 * @param   pin_name : the ADC pin
 */
void DrvAdcInitChannel(ADC_PIN_NAME pin_name);

/**
 * @brief   Function to start an ADC conversion
 *
 * @param   pin_name : the ADC pin
 */
BOOLEAN DrvAdcStartConversion(ADC_PIN_NAME pin_name);

/**
 * @brief   Interrupt Service Routine for ADC Conversion
 *
 */
void DrvAdcIsrConversionDone(void);

/**
 * @brief   Function to check if ADC conversion is done.
 *
 */
BOOLEAN DrvAdcConversionDone(void);

/**
 * @brief   Function to get the ADC result
 *
 * @param   pin_name : the ADC pin
 *
 * @return the adc result
 */
UNSIGNED_16 DrvAdcGetResult(void);

/**
 * @brief   Function to get the ADC result generated by interrupt
 *
 * @return the adc result
 */
UNSIGNED_16 DrvAdcGetResultOfInt(void);

//UNSIGNED_16 DrvAdcGetResultOfInt(ADC_PIN_NAME pin_name);
/**
 * @brief   Fucntion to Enable ADC-interrupt
 *
 */
//void DrvAdcIntEnable(void);

/**
 * @brief   Fucntion to Disable ADC-interrupt
 *
 */
//void DrvAdcIntDisable(void);

/**
 * @brief   Interrupt subroutine when SPI receives data in case of slave
 *
 */
//void DrvAdcConversionDoneIsr(void) __irq;

/**
 * @brief   Registers the Handler when an ADC-interrupt occurs
 *
 * @param   ch : the ADC pin
 * @param	hook_adc_conv_done : pointer to function being registered and executed when an ADC-conversion is done
 *
 * @return  TRUE if the Handler was registered 
 */
//BOOLEAN DrvAdcRegisterConvDoneHandler(ADC_PIN_NAME ch, HOOK_ADC_CONVERSION_DONE hook_adc_conv_done);
/**********************************************************************************************************************/



/***********************************************************************************************************************
; E X P O R T E D   S T A T I C   I N L I N E   F U N C T I O N S
;---------------------------------------------------------------------------------------------------------------------*/
/**********************************************************************************************************************/

#endif /* DRV__ADC_H */


